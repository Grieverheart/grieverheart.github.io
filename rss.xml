<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NICK TASIOS</title><link>http://www.nicktasios.nl/</link><description>This is a demo site for Nikola.</description><atom:link href="http://www.nicktasios.nl/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:nicktasios@gmail.com"&gt;Nick Tasios&lt;/a&gt; </copyright><lastBuildDate>Fri, 27 Sep 2024 21:31:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Latent Diffusion Series: Latent Diffusion Model</title><link>http://www.nicktasios.nl/posts/latent-diffusion-series-diffusion-model/</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/mnist_corruption_bg.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;In the Latent Diffusion Series of blog posts, I'm going through all components needed to train a latent diffusion model to generate random digits from the MNIST dataset. In the third, and last, post, we will finally build and train a latent diffusion model which will be trained to generate random MNIST digits.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/latent-diffusion-series-diffusion-model/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/latent-diffusion-series-diffusion-model/</guid><pubDate>Fri, 27 Sep 2024 13:10:30 GMT</pubDate></item><item><title>Latent Diffusion Series: Variational Autoencoder (VAE)</title><link>http://www.nicktasios.nl/posts/latent-diffusion-series-variational-autoencoder/</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/mnist_autoencoder_bg.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;In the Latent Diffusion Series of blog posts, I'm going through all components needed to train a latent diffusion model to generate random digits from the MNIST dataset. In the second post, we will build and train a variational autoencoder to generate MNIST digits. The latent variables of these models are defined to be normally distributed, something that will later enable our diffusion model operate in the latent space.  &lt;/p&gt;&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/latent-diffusion-series-variational-autoencoder/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/latent-diffusion-series-variational-autoencoder/</guid><pubDate>Wed, 29 Nov 2023 13:10:30 GMT</pubDate></item><item><title>Latent Diffusion Series: MNIST Classifier</title><link>http://www.nicktasios.nl/posts/latent-diffusion-series-mnist-classifier/</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/mnist_classifier.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;In the Latent Diffusion Series of blog posts, I'm going through all components needed to train a latent diffusion model to generate random digits from the MNIST dataset. In this first post, we will train a simple classifier to classify MNIST digits. This will later be used for scoring the quality of the generated digits using a variant of the so-called &lt;a href="https://en.wikipedia.org/wiki/Fr%C3%A9chet_inception_distance"&gt;Fréchet inception distance (FID)&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/latent-diffusion-series-mnist-classifier/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/latent-diffusion-series-mnist-classifier/</guid><pubDate>Tue, 29 Aug 2023 19:07:30 GMT</pubDate></item><item><title>Simulating a CRT TV with C++ and OpenGL</title><link>http://www.nicktasios.nl/posts/simulating-a-crt-tv-with-c%2B%2B-and-opengl.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/crt_screenshot.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;With the aid of the oscilloscope simulator we built in a &lt;a href="http://www.nicktasios.nl/posts/simulating-an-xy-oscilloscope-on-the-gpu.html"&gt;past blog post&lt;/a&gt;, we will now build CRT TV simulator.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/simulating-a-crt-tv-with-c%2B%2B-and-opengl.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/simulating-a-crt-tv-with-c%2B%2B-and-opengl.html</guid><pubDate>Sat, 24 Sep 2022 09:06:33 GMT</pubDate></item><item><title>Building a Sequencer and a Level Editor for Vectron</title><link>http://www.nicktasios.nl/posts/building-a-sequencer-and-a-lever-editor-for-vectron.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/patch_sequence.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;&lt;a href="https://studiostok.itch.io/vectron"&gt;Vectron&lt;/a&gt; is unique in the way audio, graphics, and gameplay are intertwined. This feature of Vectron meant I had to build a special audio sequencer that also worked as a level editor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/building-a-sequencer-and-a-lever-editor-for-vectron.html"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/building-a-sequencer-and-a-lever-editor-for-vectron.html</guid><pubDate>Tue, 13 Sep 2022 20:52:33 GMT</pubDate></item><item><title>Making sounds using SDL and visualizing them on a simulated oscilloscope.</title><link>http://www.nicktasios.nl/posts/making-sounds-using-sdl-and-visualizing-them-on-a-simulated-oscilloscope.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/oscillations.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;The most important part of &lt;a href="https://studiostok.itch.io/vectron"&gt;Vectron&lt;/a&gt; is the real-time generation and visualization of audio. In the previous blog post I already built a simulated XY oscilloscope which I'll use to visualize the two stereo channels, and I'll use SDL for the platform-independent playback of the audio.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/making-sounds-using-sdl-and-visualizing-them-on-a-simulated-oscilloscope.html"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/making-sounds-using-sdl-and-visualizing-them-on-a-simulated-oscilloscope.html</guid><pubDate>Mon, 27 Dec 2021 09:49:50 GMT</pubDate></item><item><title>Simulating an XY oscilloscope on the GPU</title><link>http://www.nicktasios.nl/posts/simulating-an-xy-oscilloscope-on-the-gpu.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/vectron_start_screen.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;It's been a couple of years since the post where I first introduced the new game I was working on, Vectron. In this post I wanted to tell you a bit about how I programmed the graphics of Vectron. Although I finished the game nearly a year ago, I was putting of releasing it. Compiling it for Windows and MacOS was a barrier I had to overcome, but I can finally say that I released my first game! You can checkout Vectron's page on &lt;a href="https://studiostok.itch.io/vectron"&gt;itch.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/simulating-an-xy-oscilloscope-on-the-gpu.html"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/simulating-an-xy-oscilloscope-on-the-gpu.html</guid><pubDate>Fri, 05 Nov 2021 22:39:37 GMT</pubDate></item><item><title>Rust vs C++ - Implementing a Neural Network</title><link>http://www.nicktasios.nl/posts/rust-vs-c%2B%2B-implementing-a-neural-network.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/cpprust.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I first learned Rust back in 2014, before it was stable. Rust is definitely a very interesting language so I have decided to revisit it by programming a simple neural network. For comparison, I also implemented the network in C++, the language I'm looking to replace.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/rust-vs-c%2B%2B-implementing-a-neural-network.html"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/rust-vs-c%2B%2B-implementing-a-neural-network.html</guid><pubDate>Sat, 06 Jul 2019 17:18:48 GMT</pubDate></item><item><title>Conceiving my first game made me find out how to be more creative</title><link>http://www.nicktasios.nl/posts/in-search-for-creativity.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/creativity.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;It's been a while, a whole year to be exact, and a very eventful one. I'd like to share with you some of the things that happened this year, as well as the things I have been working on and that made me shift away my attention from the blog.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/in-search-for-creativity.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/in-search-for-creativity.html</guid><pubDate>Fri, 28 Jun 2019 19:00:58 GMT</pubDate></item><item><title>Space Invaders from Scratch - Part 5</title><link>http://www.nicktasios.nl/posts/space-invaders-from-scratch-part-5.html</link><dc:creator>Nick Tasios</dc:creator><description>&lt;figure&gt;&lt;img src="http://www.nicktasios.nl/files/space-invaders-window-5.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;In this series of posts, I am going to create a clone of the classic arcade game, &lt;a href="https://en.wikipedia.org/wiki/Space_Invaders"&gt;space invaders&lt;/a&gt;, in C++ using only a few dependencies. In this last post of the series, I will handle scoring and add routines for drawing text and other UI elements.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nicktasios.nl/posts/space-invaders-from-scratch-part-5.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.nicktasios.nl/posts/space-invaders-from-scratch-part-5.html</guid><pubDate>Thu, 28 Jun 2018 18:36:14 GMT</pubDate></item></channel></rss>